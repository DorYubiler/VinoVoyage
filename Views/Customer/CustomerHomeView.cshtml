@model VinoVoyage.ViewModel.UserViewModel
@using VinoVoyage.Models

@{
    ViewBag.Title = "CustomerHomeView";

}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel=" stylesheet" href="~/UI/css/Style.css" />
    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    <script src="~/UI/JS/CostumerScript.js"></script>
</head>
<body>
    <div id="main" class="window">

        <div class="topnav" id="myTopnav">
            <a onclick="openMainWindow()"><i class="fa fa-home"></i> VINOVOYAGE</a>

            @if (!(Model.user.Username.Contains("guest")))
            {
                <div class="dropdown">
                    <button class="dropbtn"><i class="fa fa-user" aria-hidden="true"></i> @ViewBag.Username</button>
                    <div class="dropdown-content">
                        <a onclick="changesInfotogglePopup()">update info</a>
                        <a onclick="toggleTrackPopup()">track shipping</a>
                        <a onclick="toggleConfirmPopup('logoutPopup')">logout</a>
                    </div>
                </div>
            }
            else
            {
                <div class="dropdown">
                    <button class="dropbtn"><i class="fa fa-user" aria-hidden="true"></i> guest</button>
                    <div class="dropdown-content">
                        <a onclick="toggleConfirmPopup('logoutPopup')">home page</a>
                    </div>
                </div>
            }
            @if (!(Model.user.Username.Contains("guest")))
            {
                <a onclick="openNav(WishWindow, cartWindow)"><i class="fa fa-heart"></i></a>
            }
            <a class="split"><span onclick="openNav(cartWindow, WishWindow)"><i class="fa fa-shopping-cart" aria-hidden="true"></i></span></a>

            <div class="search-container">
                <form id="searchForm" class="searchForm">
                    <input type="text" placeholder="Search.." id="search" />
                    <button type="submit" class="searchButton" onclick="openWindow(event, 'searchdiv')"><i class="fa fa-search"></i></button>
                </form>
            </div>
            @if (!(Model.user.Username.Contains("guest")))
            {
                <div id="trackPopup" style="overflow-y: auto; max-height: 500px; border: 6px solid black; min-width:300px;" class="popup">
                    <span onclick="document.getElementById('trackPopup').style.display='none'" class="close" title="Close Modal">&times;</span>
                     
                    @Html.Partial("_ShippingTrackerView", Model.shipping)
                </div>
            }


        </div>
        <!-- cart window -->
        <div id="cartWindow" class="sidenavCart">
            <style>
                table {
                    border-collapse: collapse;
                    width: 100%;
                    font-family: Lucida Console;
                    font-weight: 200;
                    font-size: 14px;
                    font-weight: 300;
                    color: black;
                    text-transform: uppercase;
                    overflow-y: auto;
                }

                td, th {
                    text-align: center;
                    /*                    padding: 8px;*/
                    font-size: 14px;
                    white-space: nowrap;
                    vertical-align: top;
                }

                    td .prodCartImage {
                        width: 60px;
                    }

                tr:nth-child(even) {
                    background-color: #C9958A;
                }

                table button {
                    display: inline-block;
                    width: 13px;
                    height: 13px;
                    background-color: black;
                    color: #f4e1d2;
                    padding: 0 0 0 0;
                    cursor: pointer;
                    font-size: 10px;
                    font-weight: 400;
                }

                table h1 {
                    display: inline-block;
                    width: 10px;
                    height: 10px;
                    color: black;
                    padding: 0 0 0px 0;
                    font-size: 13px;
                    font-weight: 200;
                    font-family: 'Lucida Console';
                }

                .titles {
                    font-family: 'Lucida Console';
                    font-size: 22px;
                    font-weight: revert;
                    color: black;
                    text-transform: uppercase;
                    text-align: center;
                    text-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);
                    background-color: #f4e1d2;
                    margin-left: 200px;
                }

                .outOfStockLayer {
                    opacity: 1;
                    max-width: 250px;
                    font-size: 12px;
                    font-family: 'Lucida Console';
                    white-space: nowrap;
                    background-color: grey;
                    padding: 6px 15px;
                    border-radius: 1px;
                    color: white;
                    margin: 0 40px 0 0;
                }

                td .name {
                    color: blue;
                }
            </style>
            <div class="cartList">
                <a href="javascript:void(0)" class="closebtnCart" onclick="closeNav(cartWindow)">&times;</a>
                <div class="topCart">
                    <div class="cartTitle">Shopping Cart</div>
                </div>
                <table>
                    <tbody class="cartItem">
                        @foreach (OrderModel order in Model.cart)
                        {
                            var product = Model.products.FirstOrDefault(p => p.ProductID == order.ProductID);
                            <tr data-productid="@order.ProductID">
                                <td class="prodCartImage">
                                    <img src="~/UI/img/wines/@(product.ProductName)@(product.ProductID.ToString()).jpg" alt="wine" style="width:100%" />
                                </td>
                                <td class="name">@product.ProductName </td>
                                @if (product.NewPrice != 0)
                                {
                                    <td class="prodPrice">@(product.NewPrice) ₪</td>
                                }
                                else
                                {
                                    <td class="prodPrice">@(product.Price) ₪</td>
                                }
                                <td class="quantity">
                                    <button onclick="minusBtn(this)" class="minus"><</button>
                                    <h1>@order.Quantity</h1>
                                    <button onclick="plusBtn(this)" class="plus">></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
            <div class="cartActions">
                <div class="cartTotal">
                    total price: @(Session["cartTotal"]) ₪
                </div>
                @{ TempData["UserVieModel"] = Model; }
                <a href="@Url.Action("CheckoutView", "Customer",Model.user)" class="cartActionsBtn">checkout</a>
                <a onclick="toggleConfirmPopup('emptyCartPopup')" class="cartActionsBtn">empty cart</a>
            </div>
        </div>

        <!-- wishlist window -->
        <div id="WishWindow" class="sidenavCart">
            <div class="cartList">
                <a href="javascript:void(0)" class="closebtnCart" onclick="closeNav(WishWindow)">&times;</a>
                <div class="topCart">
                    <div class="cartTitle">Wish List</div>
                </div>
                <table>
                    <tbody class="listItem">
                        @foreach (WishListModel item in Model.wishList)
                        {
                            var product = Model.products.FirstOrDefault(i => i.ProductID == item.ProductID);
                            <tr data-listid="@item.ProductID">
                                <td class="prodCartImage">
                                    <img src="~/UI/img/wines/@(product.ProductName)@(product.ProductID.ToString()).jpg" alt="wine" style="width:100%" />
                                </td>
                                <td class="name">@product.ProductName </td>
                                @if (product.NewPrice != 0)
                                {
                                    <td class="prodPrice">@(product.NewPrice) ₪</td>
                                }
                                else
                                {
                                    <td class="prodPrice">@(product.Price) ₪</td>
                                }
                                <td class="addToCart">
                                    <div class="wishButtons">
                                        <button class="wishButton" onclick="addToCart('@product.ProductID')"><i class="fas fa-cart-plus"></i></button>
                                        <button class="wishButton" onclick="removeFromList(this, '@product.ProductID')">remove</button>
                                    </div>
                                </td>
                            </tr>

                        }
                    </tbody>
                </table>

            </div>
            <div class="cartActions">
                @{ TempData["UserVieModel"] = Model; }
                <a onclick="addListToCart()" class="cartActionsBtn">add list to cart</a>
                <a onclick="toggleConfirmPopup('emptylistPopup')" class="cartActionsBtn">empty list</a>
            </div>
        </div>


        <div class="main-content" id="main-content">
            <!-- side navigation bar -->
            <div class="tab" id="sideWineMenu">
                <button class="tablinks" onclick="openWindow(event, 'AllWines')">All Wines</button>
                <button class="tablinks" onclick="openWindow(event, 'Whites')">White</button>
                <button class="tablinks" onclick="openWindow(event, 'Reds')">Red</button>
                <button class="tablinks" onclick="openWindow(event, 'Roses')">Rose</button>
                <button class="tablinks" onclick="openWindow(event, 'Sales')">On sale</button>
            </div>

            <div class="window" id="windowMain" style="top:10px;">
                @Html.Partial("_home")
            </div>

            <div id="AllWines" class="tabcontent">
                <select class="sortselect" id="sortAll" data-wine-color="AllWines">
                    <option value="">Sort by</option>
                    <option value="PLH">Price: Low-High</option>
                    <option value="PHL">Price: High-Low</option>
                    <option value="popular">by popularity</option>
                </select>
                <h1 class="titles">all wines</h1>
                @if (!(Model.user.Username.Contains("guest")))
                {
                    <div class="prodGrid">
                        @Html.Partial("_ProductsGrid", Model.products)

                    </div>
                }
                else
                {
                    <div class="prodGrid">
                        @Html.Partial("_GuestGrid", Model.products)

                    </div>
                }

            </div>

            <div id="Whites" class="tabcontent">
                <select class="sortselect" id="sortWhite" data-wine-color="Whites">
                    <option value="">Sort by</option>
                    <option value="PLH">Price: Low-High</option>
                    <option value="PHL">Price: High-Low</option>
                    <option value="popular">by popularity</option>
                </select>
                <h1 class="titles">Whites</h1>
                @if (!(Model.user.Username.Contains("guest")))
                {
                    <div class="prodGrid">
                        @Html.Partial("_ProductsGrid", Model.products.Where(p => p.Type.ToString() == "white"))

                    </div>
                }
                else
                {
                    <div class="prodGrid">
                        @Html.Partial("_GuestGrid", Model.products.Where(p => p.Type.ToString() == "white"))

                    </div>
                }

            </div>

            <div id="Reds" class="tabcontent">
                <select class="sortselect" id="sortRed" data-wine-color="Reds">
                    <option value="">Sort by</option>
                    <option value="PLH">Price: Low-High</option>
                    <option value="PHL">Price: High-Low</option>
                    <option value="popular">by popularity</option>
                </select>
                <h1 class="titles">Reds</h1>
                @if (!(Model.user.Username.Contains("guest")))
                {
                    <div class="prodGrid">
                        @Html.Partial("_ProductsGrid", Model.products.Where(p => p.Type.ToString() == "red"))

                    </div>
                }
                else
                {
                    <div class="prodGrid">
                        @Html.Partial("_GuestGrid", Model.products.Where(p => p.Type.ToString() == "red"))

                    </div>
                }
            </div>
            <div id="Roses" class="tabcontent">
                <select class="sortselect" id="sortRose" data-wine-color="Roses">
                    <option value="">Sort by</option>
                    <option value="PLH">Price: Low-High</option>
                    <option value="PHL">Price: High-Low</option>
                    <option value="popular">by popularity</option>
                </select>
                <h1 class="titles">Rose</h1>
                @if (!(Model.user.Username.Contains("guest")))
                {
                    <div class="prodGrid">
                        @Html.Partial("_ProductsGrid", Model.products.Where(p => p.Type.ToString() == "rose"))

                    </div>
                }
                else
                {
                    <div class="prodGrid">
                        @Html.Partial("_GuestGrid", Model.products.Where(p => p.Type.ToString() == "rose"))

                    </div>
                }
            </div>
            <div id="Sales" class="tabcontent">
                <select class="sortselect" id="sortSales" data-wine-color="Sales">
                    <option value="">Sort by</option>
                    <option value="PLH">Price: Low-High</option>
                    <option value="PHL">Price: High-Low</option>
                    <option value="popular">by popularity</option>
                </select>
                <h1 class="titles">On sale</h1>
                @if (!(Model.user.Username.Contains("guest")))
                {
                    <div class="prodGrid">
                        @Html.Partial("_ProductsGrid", Model.products.Where(p => p.NewPrice != 0))

                    </div>
                }
                else
                {
                    <div class="prodGrid">
                        @Html.Partial("_GuestGrid", Model.products.Where(p => p.NewPrice != 0))

                    </div>
                }
            </div>
            <div id="searchdiv" class="tabcontent">
                <h1 class="titles">Search results:</h1>
                <div id="prodgrid" class="prodGrid">

                </div>
            </div>
        </div>


        @*----------------------------------------*@
        <div id="paymentPopup" class="popup">
            <span onclick="document.getElementById('paymentPopup').style.display='none'" class="close" title="Close Modal">&times;</span>
            @using (Html.BeginForm("Payment", "Customer", FormMethod.Post, new { @id = "paymentForm" }))
            {
                <div class="popup-container">
                    <div class="popup-col">
                        <div class="popupTotal">total price: @(Session["cartTotal"])</div>
                        <div class="adress-info">
                            <h3>Shipping Address</h3>
                            <div class="paymentTitles">Enter valid shipping adress</div>
                            <div class="paymentTitles">Name</div>
                            <input type="text" class="popup-input" id="username" name="username" placeholder="Full Name" required>
                            <div class="paymentTitles">street</div>
                            <input type="text" class="popup-input" id="cstreet" name="cstreet" placeholder="street" required>
                            <div class="paymentTitles">city</div>
                            <input type="text" class="popup-input" id="city" name="city" placeholder="city" required>
                        </div>
                    </div>
                    <div class="popup-col">
                        <div class="payment-info">
                            <h3>Payment</h3>
                            <div class="paymentTitles">Accepted Cards</div>
                            <div class="icon-container">
                                <i class="fa fa-cc-visa" style="color:navy;"></i>
                                <i class="fa fa-cc-amex" style="color:blue;"></i>
                                <i class="fa fa-cc-mastercard" style="color:red;"></i>
                                <i class="fa fa-cc-discover" style="color:orange;"></i>
                            </div>
                            <div class="paymentTitles">Credit card number</div>
                            <input type="text" class="popup-input" id="ccnum" name="cardnumber" placeholder="1111-2222-3333-4444" required>
                            <div class="paymentTitles">Exp Date</div>
                            <div class="dateCode">
                                <input type="month" class="popup-input" style="text-transform:uppercase;" id="expDate" name="expDate" min="2024-04" onchange="validateMonth(this)" required>
                                <input type="text" class="popup-inputCVV" style="text-transform:uppercase;" id="cvv" name="cvv" placeholder="CVV" required>
                                <div id="expDateError" style="display: none;">Please select a month from the current month forward.</div>
                            </div>
                        </div>
                    </div>
                </div>
                <button type="submit" onclick="checkPayment()">continue</button>
            }
            <div id="paymentValidationErrors"></div>
        </div>
        @*---------------------------------buynow-----------------------------------------*@
        <div id="buynowPopup" class="popup">
            <span onclick="document.getElementById('buynowPopup').style.display='none'" class="close" title="Close Modal">&times;</span>
            @using (Html.BeginForm("Buynow", "Customer", FormMethod.Post, new { @id = "buynowForm" }))
            {


                <div class="popup-container">
                    <div class="popup-col">
                        <div class="popupTotal" id="popupTotal"> </div>
                        <div class="adress-info">
                            <h3>Shipping Address</h3>
                            <div class="paymentTitles">Enter valid shipping address</div>
                            <div class="paymentTitles">Name</div>
                            <input type="text" class="popup-input" id="busername" name="username" placeholder="Full Name" required>
                            <div class="paymentTitles">street</div>
                            <input type="text" class="popup-input" id="bcstreet" name="cstreet" placeholder="street" required>
                            <div class="paymentTitles">city</div>
                            <input type="text" class="popup-input" id="bcity" name="city" placeholder="city" required>
                        </div>
                    </div>
                    <div class="popup-col">
                        <div class="payment-info">
                            <h3>Payment</h3>
                            <div class="paymentTitles">Accepted Cards</div>
                            <div class="icon-container">
                                <i class="fa fa-cc-visa" style="color:navy;"></i>
                                <i class="fa fa-cc-amex" style="color:blue;"></i>
                                <i class="fa fa-cc-mastercard" style="color:red;"></i>
                                <i class="fa fa-cc-discover" style="color:orange;"></i>
                            </div>
                            <div class="paymentTitles">Credit card number</div>
                            <input type="text" class="popup-input" id="bccnum" name="cardnumber" placeholder="1111-2222-3333-4444" required>
                            <div class="paymentTitles">Exp Date</div>
                            <div class="dateCode">
                                <input type="month" class="popup-input" style="text-transform:uppercase;" id="bexpDate" name="expDate" min="2024-04" onchange="validateMonth(this)" required>
                                <input type="text" class="popup-inputCVV" style="text-transform:uppercase;" id="bcvv" name="cvv" placeholder="CVV" required>
                                <div id="bexpDateError" style="display: none;">Please select a month from the current month forward.</div>
                            </div>
                        </div>
                    </div>
                </div>
                <button type="submit" onclick="checkBuynow()">continue</button>
            }
            <div id="buynowValidationErrors"></div>
        </div>

        <div id="ShipConfPopup" class="popup" style="width:600px;">
            <span onclick="document.getElementById('ShipConfPopup').style.display='none'" class="close" title="Close Modal">&times;</span>
            <p>The order has been sent, delivery time up to two weeks </p>

        </div>

        <div id="emptyCartPopup" class="popup" style="width:600px;">
            <span onclick="document.getElementById('emptyCartPopup').style.display='none'" class="close" title="Close Modal">&times;</span>
            <p>Are you sure you want to empty the cart?</p>
            <button onclick="emptyCart(),closeAllPopups()">Yes</button>
            <button onclick="closeAllPopups()" style="width:40%; margin-left:30px;">No</button>

        </div>
        <div id="emptylistPopup" class="popup" style="width:600px;">
            <span onclick="document.getElementById('emptylistPopup').style.display='none'" class="close" title="Close Modal">&times;</span>
            <p>Are you sure you want to empty the list?</p>
            <button onclick="emptyList(),closeAllPopups()">Yes</button>
            <button onclick="closeAllPopups()" style="width:40%; margin-left:30px;">No</button>

        </div>

        <div id="logoutPopup" class="popup" style="width:600px;">
            <span onclick="document.getElementById('logoutPopup').style.display='none'" class="close" title="Close Modal">&times;</span>
            <p>Are you sure you want to logout?</p>
            <button onclick="logout()">Yes,thank you</button>
            <button onclick="closeAllPopups()" style="width:40%; margin-left:30px;">No,I can't leave!</button>

        </div>

        <div id="updateInfoPopup" class="popup">
            <span onclick="document.getElementById('updateInfoPopup').style.display='none'" class="close" title="Close Modal">&times;</span>
            @using (Html.BeginForm("UpdateInfo", "Customer", FormMethod.Post, new { @id = "updateinfoForm", }))
            {
                <div class="popup-container">
                    <div class="popup-colCenter">
                        <div class="titles" style="text-align:start; margin-left:0px;">VINOVOYAGE</div>
                        <h3>Update info- here you can change your password or email</h3>
                        <h3></h3>
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="text" style="display:none;" id="usname">@Model.user.Username</div>
                        <div class="hometTitles">email</div>
                        <input type="email" id="Cemail" name="email" placeholder="example@gmail.com" />
                        <div class="hometTitles">password</div>
                        <input type="password" id="Cpassword" name="Password" placeholder="6-10 characters" />
                        <div class="hometTitles">confirm password</div>
                        <input type="password" id="password2" name="Password2" placeholder="" />
                        <button class="popUpButton" id="showLoginForm" type="submit" style="margin: 13px 0 0 0;">Change</button>
                        <div id="changeValidationErrors" class="errorMsg"></div>
                    </div>
                </div>
            }
        </div>
        <div id="changesConfPopup" class="popup" style="width:600px;">
            <span onclick="document.getElementById('changesConfPopup').style.display='none'" class="close" title="Close Modal">&times;</span>
            <p>Your information updated successfully</p>
        </div>

        <div id="notifyPopup" class="popup" style="width:600px;">
            <span onclick="document.getElementById('notifyPopup').style.display='none'" class="close" title="Close Modal">&times;</span>
            <p>We will make sure to update you via email when the product is back in stock</p>
            <button onclick="closeAllPopups()">OK</button>
        </div>

        <div id="outOfStockPopup" class="popup" style="width:600px;">
            <span onclick="document.getElementById('outOfStockPopup').style.display='none'" class="close" title="Close Modal">&times;</span>
            @if (Model.user.Username.Contains("guest"))
            {
                <p>we are sorry but this wine is out of stock at this moment. check back soon </p>
            }
            else
            {
                <p>we are sorry but this wine is out of stock at this moment </p>
                <button onclick="toggleConfirmPopup('notifyPopup')">Tell me when it's back</button>
            }
        </div>

        <script>
             function plusBtn(button) {
                 var row = $(button).closest('tr');
                 var pID = row.data('productid');
                 $.ajax({
                     url: '@Url.Action("AddToCart", "Customer")',
                     type: 'POST',
                     data: { prodId: pID },
                     success: function (response) {
                         if (response.success) {
                             var updatedAmount = response.newQuantity;
                             var updatedTotalPrice = response.total;
                             row.find('h1').text(updatedAmount);
                             $('.cartTotal').text('total price: ' + updatedTotalPrice);
                         }
                         else {
                             toggleOutOfStockPopup();
                         }
                     },
                     error: function (xhr, status, error) { }
                 });
             }

             function removeFromList(button, pID) {
                 var row = $(button).closest('tr');
                 console.log(pID);
                 $.ajax({
                     url: '@Url.Action("DeleteFromList", "Customer")',
                     type: 'POST',
                     data: { prodId: pID },
                     success: function (response) {
                         row.remove();
                     },
                     error: function (xhr, status, error) { }
                 });

             }

             function minusBtn(button) {
                 var row = $(button).closest('tr');
                 var pID = row.data('productid');
                 $.ajax({
                     url: '@Url.Action("DeleteFromCart","Customer")',
                     type: 'POST',
                     data: { prodId: pID },
                     success: function (response) {
                         var updatedAmount = response.newQuantity;
                         var updatedTotalPrice = response.total;
                         if (updatedAmount == 0) {
                             row.remove();
                         }
                         else {
                             row.find('h1').text(updatedAmount);
                         }
                         $('.cartTotal').text('total price: ' + updatedTotalPrice);
                     },
                     error: function (xhr, status, error) { }
                 });
             }

            function emptyList() {
                    $.ajax({
                        url: '@Url.Action("EmptyList", "Customer")',
                        type: 'POST',
                        success: function (response) {
                            $('.listItem').empty();
                        },
                        error: function (xhr, status, error) { }
                    });

            }

             function emptyCart() {
                     $.ajax({
                         url: '@Url.Action("EmptyCart", "Customer")',
                         type: 'POST',
                         success: function (response) {
                             $('.cartTotal').text('total price: 0');
                             $('.cartItem').empty();
                         },
                         error: function (xhr, status, error) { }
                     });

             }

             function addToList(ProductId) {
                 $.ajax({
                     url: '@Url.Action("AddToList", "Customer")',
                     type: 'POST',
                     data: { prodId: ProductId },
                     success: function(response) {
                         if (response.success) {
                            updateList(ProductId, response);
                         }
                     }, error: function (xhr, status, error) { }
                 });
            }

            function addListToCart() {
                $.ajax({
                    url: '@Url.Action("ReturnNewToCart", "Customer")',
                    type: 'POST',
                    success: function (response) {
                        if (response.success) {
                            var newItems = response.newItems;
                            newItems.forEach(function (item) {
                                addToCart(item.ProductID);
                            });
                        }
                    }
                });
            }
             function addToCart(ProductId) {
                 $.ajax({
                     url: '@Url.Action("AddToCart", "Customer")',
                     type: 'POST',
                     data: { prodId: ProductId },
                     success: function (response) {                 // Update cart table
                         updateCart(ProductId, response);
                         var name = response.prod.ProductName;
                         var amount = response.prod.Amount;
                         var availableBtn = document.querySelector('.productButtons[data-product-available="' + ProductId + '"]');

                         if (availableBtn && amount == 0) {
                             availableBtn.style.visibility = 'hidden';
                             var notInStockBtn = document.querySelector('.productButtons[data-not-in-stock="' + name + '"]');
                             if (notInStockBtn) {
                                 notInStockBtn.style.visibility = 'visible';
                             } else {
                                 if (amount == 0) {
                                     // Create the new element
                                     var newElement = document.createElement('div');
                                     newElement.classList.add('productButtons');
                                     newElement.dataset.notInStock = name;

                                     var outOfStockLayer = document.createElement('div');
                                     outOfStockLayer.classList.add('outOfStockLayer');

                                     var outOfStockText = document.createElement('div');
                                     outOfStockText.classList.add('outOfStockText');
                                     outOfStockText.textContent = 'out of stock';

                                     var addToCartButton = document.createElement('button');
                                     addToCartButton.classList.add('addToCart');

                                     var icon = document.createElement('i');
                                     icon.classList.add('fas', 'fa-bell');

                                     addToCartButton.appendChild(icon);
                                     newElement.appendChild(outOfStockLayer);
                                     outOfStockLayer.appendChild(outOfStockText);
                                     if (!response.guest) {
                                         newElement.appendChild(addToCartButton);
                                     }
                                     // Replace availableBtn with the new element
                                     availableBtn.parentNode.replaceChild(newElement, availableBtn);
                                 }
                             }

                         }
                     }, error: function (xhr, status, error) { }
                 });

             }
             function updateList(id, response) {
                 console.log('productid:', id)
                 var $row = $('tr[data-listid="' + id + '"]');
                 var newProduct = response.prod;
                 var x = newProduct.Price;
                 if (newProduct.NewPrice != 0) {
                     x = newProduct.NewPrice;
                 }
                 // Construct HTML for the table row
                 var newRow = '<tr data-listid="' + id + '">' +
                     '<td class="prodCartImage">' + '<img src="/UI/img/wines/' + newProduct.ProductName + id + '.jpg" alt="wine" style="width:100%" />' + '</td>' +
                                '<td class="name">' + newProduct.ProductName + '</td>' +
                                '<td class="prodPrice">' + x + '</td>' +
                                '<td class="addToCart">' +
                                    '<div class="wishButtons">' +
                     '<button class="wishButton" onclick="addToCart(' + id + ')"><i class="fas fa-cart-plus"></i></button>' +
                     '<button class="wishButton" onclick="removeFromList(this,' + id + ')">remove</button>' +
                                    '</div' +
                                '</td>' +
                              '</tr>';
                 $('.listItem').append(newRow);
            }


             function updateCart(id, response) {
                 var $row = $('tr[data-productid="' + id + '"]');
                 var newProduct = response.prod;
                 var exsistingAmount = newProduct.Amount;
                 if (exsistingAmount == 0) {

                 }
                 if ($row.length) {
                     // Update the quantity in the cart table
                     var quantity = parseInt($row.find('.quantity h1').text());
                     quantity++;
                     $row.find('.quantity h1').text(quantity);
                 } else {

                     var quantity = response.newQuantity;
                     var x = newProduct.Price;
                     if (newProduct.NewPrice != 0) {
                         x = newProduct.NewPrice;
                     }
                     // Construct HTML for the table row
                     var newRow = '<tr data-productid="' + newProduct.ProductID + '">' +
                         '<td class="prodCartImage">' + '<img src="/UI/img/wines/' + newProduct.ProductName + newProduct.ProductID + '.jpg" alt="wine" style="width:100%" />' + '</td>' +
                         '<td class="name">' + newProduct.ProductName + '</td>' +
                         '<td class="prodPrice">' + x + '</td>' +
                         '<td class="quantity">' +
                         '<button onclick="minusBtn(this)" class="minus"><</button>' +
                         '<h1>' + quantity + '</h1>' +
                         '<button onclick="plusBtn(this)" class="plus">></button>' +
                         '</td>' +
                         '</tr>';

                                        // Append the new row to the cart table body
                            $('.cartItem').append(newRow);
                        }
                        var updatedTotalPrice = response.total;
                        $('.cartTotal').text('total price: ' + updatedTotalPrice);
                    }

            function myFunction() {
                var x = document.getElementById("myTopnav");
                if (x.className == "topnav") {
                    x.className += " responsive";
                }
                if (x.className == "aDropdown") {
                    x.className += " responsive";
                }
                else {
                    x.className = "topnav";
                }
            }
            function openWindow(evt, wineName) {
                var i, tabcontent, tablinks;
                tabcontent = document.getElementsByClassName("tabcontent");
                for (i = 0; i < tabcontent.length; i++) {
                    tabcontent[i].style.display = "none";
                }
                tablinks = document.getElementsByClassName("tablinks");
                for (i = 0; i < tablinks.length; i++) {
                    tablinks[i].className = tablinks[i].className.replace(" active", "");
                }
                document.getElementById(wineName).style.display = "block";
                evt.currentTarget.className += " active";
                document.getElementById("windowMain").style.display = "none";
            }

            function openMainWindow() {
                tabcontent = document.getElementsByClassName("tabcontent");
                for (i = 0; i < tabcontent.length; i++) {
                    tabcontent[i].style.display = "none";
                }
                tablinks = document.getElementsByClassName("tablinks");
                for (i = 0; i < tablinks.length; i++) {
                    tablinks[i].className = tablinks[i].className.replace(" active", "");
                }
                document.getElementById("windowMain").style.display = "flex";
            }
            $(document).ready(function () {
                $('.sortselect').change(function() {
                    var sortBy = $(this).val();
                    var wineColor = $(this).data('wine-color'); // Used for identifying the correct div to update
                    $.ajax({
                        url: '@Url.Action("SortProducts", "Customer")', // Make sure this points to your actual controller and action
                        type: 'GET',
                        data: { sortBy: sortBy, wineColor: wineColor }, // wineColor is kept for client-side logic, not needed server-side
                        success: function(data) {
                            $('#' + wineColor + ' .prodGrid').html(data); // Updates the correct grid
                        },
                        error: function(error) {
                            console.log('Error: ', error);
                        }
                    });
                });
            });

            $('#searchForm').submit(function(e) {
                e.preventDefault(); // Prevent the form from submitting the traditional way
                var searchField = $('#search').val();

                $.ajax({
                    url: '@Url.Action("SearchProducts", "Customer")', // Adjust the URL to your controller and action
                    type: 'GET',
                    data: { query: searchField },
                    success: function(data) {
                        // Replace the content of your products grid with the filtered products
                        $('#prodgrid').html(data);
                    },
                    error: function(xhr, status, error) {
                        // Handle any errors
                        console.error("Search error:", status, error);
                    }
                 });
            });
        </script>

        <!-- bring them back now -->
        <div id="bthn" lang="en"></div>
        <script>
            (function () {
                var script = document.createElement("script");
                script.type = "text/javascript";
                script.src = "https://bringthemhomenow.net/1.0.8/hostages-ticker.js";
                script.setAttribute(
                    "integrity",
                    "sha384-jQVW0E+wZK5Rv1fyN+b89m7cYY8txH4s3uShzHf1T51hdBTPo7yKL6Yizgr+Gp8C"
                );
                script.setAttribute("crossorigin", "anonymous");
                document.getElementsByTagName("head")[0].appendChild(script);
            })();

        </script>
    </div>
</body>
</html>